#!/usr/bin/env python
PACKAGE = "constrained_ik"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("allow_joint_convergence",      bool_t,   0, "Allow the solver to converge based on joint convergence.",       True)
gen.add("allow_primary_normalization",  bool_t,   0, "Allow the solver to normalize primary motion.",                  True)
gen.add("allow_auxiliary_nomalization", bool_t,   0, "Allow the solver to normalize auxiliary motion",                 True)
gen.add("limit_auxiliary_motion",       bool_t,   0, "Allow the solver to limit the auxiliary motion.",               False)
gen.add("limit_auxiliary_interations",  bool_t,   0, "Allow the solver to limit the number of auxiliary interation.", False)
gen.add("solver_max_iterations",        int_t,    0, "Solver's maximum number of iterations allowed.",    500,   1)
gen.add("solver_min_iterations",        int_t,    0, "Solver's minimum number of iterations required.",     0,   0)
gen.add("auxiliary_max_iterations",     int_t,    0, "Auxiliary's maximum number of iteration allowed.",    5,   0)
gen.add("auxiliary_max_motion",         double_t, 0, "Auxiliary's maximum motion allowed.",               1.0, 0.0)
gen.add("primary_norm",                 double_t, 0, "Normalize primary motion to set value.",            1.0, 0.0, 1.0)
gen.add("auxiliary_norm",               double_t, 0, "Normalize auxiliary motion to set value.",          1.0, 0.0, 1.0)
gen.add("primary_gain",                 double_t, 0, "Solver's primary motion update gain.",              1.0, 0.0, 1.0)
gen.add("auxiliary_gain",               double_t, 0, "Solver's auxiliary motion update gain.",            1.0, 0.0, 1.0)
gen.add("joint_convergence_tol",        double_t, 0, "Solver's joint convergence tolerance.",          0.0001, 0.0)

exit(gen.generate(PACKAGE, PACKAGE, "ConstrainedIKDynamicReconfigure"))

